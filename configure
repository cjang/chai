#!/bin/sh

# This script generates the file Makefile.config
# That is all it does.
# There are no other side-effects.

# default install directory prefix is /usr/local
# to override default use --prefix=<CHAI_INSTALLDIR_PREFIX>
CHAI_INSTALLDIR_PREFIX=/usr/local
PRINT_LOGGER=
BUILD_SHARED=
for ARG in $@
do
  if [ `echo $ARG | grep "\-\-prefix="` ]
  then
    CHAI_INSTALLDIR_PREFIX=`echo $ARG | awk -F= '{print $2}'`
  fi
  if [ `echo $ARG | grep "\-\-log"` ]
  then
    PRINT_LOGGER=true
  fi
  if [ `echo $ARG | grep "\-\-shared"` ]
  then
    BUILD_SHARED=true
  fi
  if [ `echo $ARG | grep "\-h"` ]
  then
    echo "usage: $0 [--prefix=<CHAI_INSTALLDIR_PREFIX>] [--log] [--shared]"
    echo "  --prefix  sets the installation directory path"
    echo "  --log     enables verbose logging to standard error"
    echo "  --shared  builds shared object library instead of static archive"
    exit 0
  fi
done

# host CPU architecture, use 32 bit or 64 bit libraries?
if [ `uname -m | grep x86_64 | wc -l` -eq 1 ]
then
  CPU_HOST_ARCH=x86_64
  LIB_ARCH_DIR=lib64
  echo -n "host architecture is 64 bit"
else
  CPU_HOST_ARCH=x86
  LIB_ARCH_DIR=lib
  echo -n "host architecture is 32 bit"
fi

# temporary file for this script
cp /dev/null configure.tmp

# default location for AMD/ATI SDK installation
AMD_SDK_INSTALLDIR=/opt

# look for ATI SDK in /opt (older versions of OpenCL)
ls -tr ${AMD_SDK_INSTALLDIR} \
  | grep -i ati \
  >> configure.tmp

# look for AMD SDK in /opt (newer versions of OpenCL)
ls -tr ${AMD_SDK_INSTALLDIR} \
  | grep -i amd \
  >> configure.tmp

# set the AMD/ATI SDK path
if [ `cat configure.tmp | wc -l` -eq 0 ]
then
  AMD_SDK=
  echo
  echo -n "AMD/ATI SDK not found in "${AMD_SDK_INSTALLDIR}", skip AMD/ATI build"
else
  for i in `cat configure.tmp`
  do
    AMD_SDK=${AMD_SDK_INSTALLDIR}/$i
    echo
    echo -n "found "${AMD_SDK}
  done
  echo -n ", use for AMD build"
fi

# default location for NVIDIA installation
NVIDIA_INSTALLDIR=/usr/local/cuda

# set the NVIDIA CUDA path
if [ -d ${NVIDIA_INSTALLDIR} ]
then
  NVIDIA_CUDA=${NVIDIA_INSTALLDIR}
  echo
  echo -n "found "${NVIDIA_INSTALLDIR}", use for NVIDIA build"
else
  NVIDIA_CUDA=
  echo
  echo -n "NVIDIA CUDA not found in "${NVIDIA_INSTALLDIR}", skip NVIDIA build"
fi

# clear temporary file
cp /dev/null configure.tmp

# default location for Intel installation is /usr, check there first
if [ -d /usr/lib64/OpenCL/vendors/intel ]
then
  echo
  echo -n "found Intel OpenCL in /usr (default location for RPM install)"
  INTEL_SDK=/usr
else
  echo
  echo -n "Intel OpenCL not found in default installation location /usr, search /opt"
  INTEL_SDK=
  for i in `ls -tr /opt`
  do
    if [ -d /opt/$i/usr/lib64/OpenCL/vendors/intel ]
    then
      INTEL_SDK=/opt/$i
      echo
      echo -n "found ${INTEL_SDK}"
    fi
  done
  if [ ${INTEL_SDK} ]
  then
    echo -n ", use for INTEL build"
  else
    echo
    echo -n "INTEL SDK not found in /opt, skip INTEL build"
  fi
fi

echo

# remove the temporary file for this script
rm configure.tmp

# generate configuration makefile
cp /dev/null Makefile.config
echo "# Generated by the configure script." >> Makefile.config
echo "# It's ok to change the build by editing this file." >> Makefile.config
echo >> Makefile.config
echo "# make install to bin/ include/ lib/ under this path" >> Makefile.config
echo "CHAI_INSTALLDIR_PREFIX=${CHAI_INSTALLDIR_PREFIX}" >> Makefile.config
echo >> Makefile.config
echo "# probably do not need to change these" >> Makefile.config
echo "CPU_HOST_ARCH="${CPU_HOST_ARCH} >> Makefile.config
echo "LIB_ARCH_DIR="${LIB_ARCH_DIR} >> Makefile.config
echo >> Makefile.config
echo "# comment out any vendors to skip building them" >> Makefile.config
echo "# edit path to build with a different SDK version" >> Makefile.config
echo "AMD_SDK="${AMD_SDK} >> Makefile.config
echo "NVIDIA_CUDA="${NVIDIA_CUDA} >> Makefile.config
echo "INTEL_SDK="${INTEL_SDK} >> Makefile.config
echo >> Makefile.config
if [ ${PRINT_LOGGER} ]
then
  echo "# comment out to disable logging to standard error" >> Makefile.config
  echo "LOGGING_ENABLED=-D__LOGGING_ENABLED__" >> Makefile.config
else
  echo "# uncomment to enable logging to standard error" >> Makefile.config
  echo "#LOGGING_ENABLED=-D__LOGGING_ENABLED__" >> Makefile.config
fi
echo >> Makefile.config
if [ ${BUILD_SHARED} ]
then
  echo "# comment out to disable shared library build" >> Makefile.config
  echo "SHARED_CFLAGS=-fPIC" >> Makefile.config
  echo "SHARED_LDFLAGS=-shared" >> Makefile.config
else
  echo "# uncomment to enable shared library build" >> Makefile.config
  echo "#SHARED_CFLAGS=-fPIC" >> Makefile.config
  echo "#SHARED_LDFLAGS=-shared" >> Makefile.config
fi
echo "generated Makefile.config"

# generate shared library paths for vendors
if [ ${AMD_SDK} ]
then
  ENV_FILE_AMD="ENV.AMD"
  AMD_SDK_LIB_PATH=${AMD_SDK}/lib/${CPU_HOST_ARCH}
  if [ `echo $LD_LIBRARY_PATH | grep ${AMD_SDK_LIB_PATH} | wc -l` -eq 0 ]
  then
    echo export LD_LIBRARY_PATH=${AMD_SDK_LIB_PATH}:$LD_LIBRARY_PATH > ${ENV_FILE_AMD}
  else
    echo export LD_LIBRARY_PATH=$LD_LIBRARY_PATH > ${ENV_FILE_AMD}
  fi
  CHAI_BUILD_LIB=`pwd`/_install/lib
  if [ `echo $LD_LIBRARY_PATH | grep ${CHAI_BUILD_LIB} | wc -l` -eq 0 ]
  then
    echo "export LD_LIBRARY_PATH=${CHAI_BUILD_LIB}:\$LD_LIBRARY_PATH" >> ${ENV_FILE_AMD}
  fi
  CHAI_INSTALL_LIB=${CHAI_INSTALLDIR_PREFIX}/lib
  if [ `echo $LD_LIBRARY_PATH | grep ${CHAI_INSTALL_LIB} | wc -l` -eq 0 ]
  then
    echo "export LD_LIBRARY_PATH=${CHAI_INSTALL_LIB}:\$LD_LIBRARY_PATH" >> ${ENV_FILE_AMD}
  fi
  echo "generated ${ENV_FILE_AMD}"
fi

if [ ${INTEL_SDK} ]
then
  ENV_FILE_INTEL="ENV.INTEL"
  INTEL_SDK_LIB_PATH=${INTEL_SDK}/usr/${LIB_ARCH_DIR}
  if [ `echo $LD_LIBRARY_PATH | grep ${INTEL_SDK_LIB_PATH} | wc -l` -eq 0 ]
  then
    echo export LD_LIBRARY_PATH=${INTEL_SDK_LIB_PATH}:$LD_LIBRARY_PATH > ${ENV_FILE_INTEL}
  else
    echo export LD_LIBRARY_PATH=$LD_LIBRARY_PATH > ${ENV_FILE_INTEL}
  fi
  CHAI_BUILD_LIB=`pwd`/_install/lib
  if [ `echo $LD_LIBRARY_PATH | grep ${CHAI_BUILD_LIB} | wc -l` -eq 0 ]
  then
    echo "export LD_LIBRARY_PATH=${CHAI_BUILD_LIB}:\$LD_LIBRARY_PATH" >> ${ENV_FILE_INTEL}
  fi
  CHAI_INSTALL_LIB=${CHAI_INSTALLDIR_PREFIX}/lib
  if [ `echo $LD_LIBRARY_PATH | grep ${CHAI_INSTALL_LIB} | wc -l` -eq 0 ]
  then
    echo "export LD_LIBRARY_PATH=${CHAI_INSTALL_LIB}:\$LD_LIBRARY_PATH" >> ${ENV_FILE_INTEL}
  fi
  echo "generated ${ENV_FILE_INTEL}"
fi

if [ ${NVIDIA_CUDA} ]
then
  ENV_FILE_NVIDIA="ENV.NVIDIA"
  NVIDIA_CUDA_LIB_PATH=${NVIDIA_CUDA}/${LIB_ARCH_DIR}
  if [ `echo $LD_LIBRARY_PATH | grep ${NVIDIA_CUDA_LIB_PATH} | wc -l` -eq 0 ]
  then
    echo export LD_LIBRARY_PATH=${NVIDIA_CUDA_LIB_PATH}:$LD_LIBRARY_PATH > ${ENV_FILE_NVIDIA}
  else
    echo export LD_LIBRARY_PATH=$LD_LIBRARY_PATH > ${ENV_FILE_NVIDIA}
  fi
  CHAI_BUILD_LIB=`pwd`/_install/lib
  if [ `echo $LD_LIBRARY_PATH | grep ${CHAI_BUILD_LIB} | wc -l` -eq 0 ]
  then
    echo "export LD_LIBRARY_PATH=${CHAI_BUILD_LIB}:\$LD_LIBRARY_PATH" >> ${ENV_FILE_NVIDIA}
  fi
  CHAI_INSTALL_LIB=${CHAI_INSTALLDIR_PREFIX}/lib
  if [ `echo $LD_LIBRARY_PATH | grep ${CHAI_INSTALL_LIB} | wc -l` -eq 0 ]
  then
    echo "export LD_LIBRARY_PATH=${CHAI_INSTALL_LIB}:\$LD_LIBRARY_PATH" >> ${ENV_FILE_NVIDIA}
  fi
  echo "generated ${ENV_FILE_NVIDIA}"
fi

# final message, build targets
echo
echo -n "Building for vendors:"
if [ ${AMD_SDK} ]; then echo -n " AMD"; fi
if [ ${INTEL_SDK} ]; then echo -n " INTEL"; fi
if [ ${NVIDIA_CUDA} ]; then echo -n " NVIDIA"; fi
echo

# final message, edit Makefile.config
echo
echo "To change build settings, edit Makefile.config:"
cat Makefile.config | grep -v '# ' | sed -s 's/^/  /'

# final message, setting LD_LIBRARY_PATH
echo
echo "When building libraries, the LD_LIBRARY_PATH should not include vendor"
echo "SDK shared libraries. It is ok to have multiple vendors installed in one"
echo "filesystem. However, setting LD_LIBRARY_PATH at library build time can"
echo "result in static linkage to a particular vendor."
echo
echo "When running applications, LD_LIBRARY_PATH may need to be set so the"
echo "dynamic linker can find the vendor libraries. This may be done with"
echo "one of the following:"
if [ ${AMD_SDK} ]; then echo "  . ${ENV_FILE_AMD}"; fi
if [ ${INTEL_SDK} ]; then echo "  . ${ENV_FILE_INTEL}"; fi
if [ ${NVIDIA_CUDA} ]; then echo "  . ${ENV_FILE_NVIDIA}"; fi

